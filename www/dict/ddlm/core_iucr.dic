##############################################################################
#                                                                            #
#                      CORE IUCr VALIDATION  DICTIONARY                      #
#                                                                            #
##############################################################################
 
data_CORE_IUCR
 
    _dictionary.title            CORE_IUCR
    _dictionary.class            Instance
    _dictionary.version          0.0.01 
    _dictionary.date             2013-05-13 
    _dictionary.uri              www.iucr.org/cif/dic/core_iucr.dic
    _dictionary.ddl_conformance  3.11.03 # UNKNOWN
    _dictionary.namespace        CoreIUCr
    _description.text
;
     This dictionary contains the definitions of data items that
     validate a submitted CIF file according to the standards of
     the IUCr Office.  
;
 

save_VALIDATION
    _definition.id               VALIDATION
    _definition.scope            Category
    _definition.class            Head          
    _definition.update           2013-05-13
    _description.text
;
    The VALIDATION group encompassing the CORE VALIDATION data items defined 
    and used with in the office of the IUCr to validated data in the Crystallographic 
    Information Framework (CIF).
;
    _name.category_id            CORE_IUCR
    _name.object_id              VALIDATION
      
#============================================================================
 
save_VALIDN
 
    _definition.id               VALIDN
    _definition.scope            Category
    _definition.class            Set
    _definition.update           2013-05-13
    _description.text
;
     The CATEGORY of data items used to describe the single term validations.
;
    _name.category_id            VALIDATION
    _name.object_id              VALIDN
 

save_validn.symms_02
    _definition.id             '_validn.symms_02'
    _definition.update          2013-05-13
    _description.text
;
     Defines the tolerances in the form [delta_lengths, delta_angles] for the 
     validation of symmetry.cell_setting against the recorded cell parameters.
;
    _name.category_id            validn
    _name.object_id              symms_02
    _type.purpose                Number
    _type.source                 Assigned
    _type.container              Matrix
    _type.contents               Real
    _type.dimension              [2]

     loop_
    _description_example.case   '[0.005, 0.05]'
     loop_
    _method.purpose
    _method.expression
     Validation
;
    With s as symmetry

    # check data item is present and has a recorded value

    If (not s.hasItem('cell_setting') or not s.cell_setting.isValuePresent() )
          Return

    With cl as cell_length
    With ca as cell_angle

    setting = s.cell_setting
    a   = cl.a
    b   = cl.b
    c   = cl.c
    alp = ca.alpha
    bet = ca.beta
    gam = ca.gamma

    dl  = validn.symms_02[0] # delta on lengths
    da  = validn.symms_02[1] # delta on angles


    cl_TooSimilar = 'Unexpected: cell lengths too similar for ' # One or more lengths are equal 
    cl_NotCorrect = 'Error: cell lenghts incorrect for ' #

    ca_Unexpected90 = 'Unexpected: cell angle close to 90 degrees for ' # Some angles are 90.
    ca_All90 = 'Unexpected: All angles are 90 degrees' #
    ca_NotCorrect = 'Error: cell angles incorrect for ' #

    If(setting == 'triclinic') {
      If( Abs(a-b)<dl || Abs(a-c)<dl || Abs(b-c)<dl )          Alert(setting, cl_TooSimilar)
      If( Abs(alp-90)<da || Abs(bet-90)<da || Abs(gam-90)<da ) Alert(setting, ca_Unexpected90)
    }
    Else If(setting == 'monoclinic') {
      If( Abs(a-b)<dl || Abs(a-c)<dl || Abs(b-c)<dl )          Alert('B', cl_TooSimilar + setting)
      If( Abs(alp-90)<da && Abs(bet-90)<da && Abs(gam-90)<da ) Alert('B', ca_All90)
      If(( Abs(alp-90)>da && Abs(bet-90)>da ) ||
         ( Abs(alp-90)>da && Abs(gam-90)>da ) ||
         ( Abs(bet-90)>da && Abs(gam-90)>da ))                 Throw(ca_NotCorrect + setting)
    }
    Else If(setting == 'orthorhombic') {
      If( Abs(a-b)<dl || Abs(a-c)<dl || Abs(b-c)<dl )          Alert(setting, cl_TooSimilar)
      If( Abs(alp-90)>da || Abs(bet-90)>da || Abs(gam-90)>da ) Throw(ca_NotCorrect + setting)
    }
    Else If(setting == 'tetragonal') {
      If( Abs(a-b)<dl && Abs(a-c)<dl && Abs(b-c)<dl )          Alert('B', cl_TooSimilar + setting)
      If( Abs(a-b)>dl && Abs(a-c)>dl )                         Throw(cl_NotCorrect + setting)
      If( Abs(alp-90)>da || Abs(bet-90)>da || Abs(gam-90)>da ) Throw(ca_NotCorrect + setting)
    }
    Else If(setting == 'trigonal' || setting == 'hexagonal') {
      If( Abs(a-b)>dl && Abs(a-c)>dl )                         Throw(cl_NotCorrect + setting)
      If( Abs(gam-120)>da || Abs(alp-90)>da || Abs(bet-90)>da) Throw(ca_NotCorrect + setting)
    }
    Else If(setting == 'rhombohedral') {
      If( Abs(a-b)>dl || Abs(a-c)>dl)                          Throw(cl_NotCorrect + setting)
      If( Abs(alp-bet)>da || Abs(bet-gam)>da)                  Throw(ca_NotCorrect + setting)
      If( Abs(alp-90)<da || Abs(bet-90)<da || Abs(gam-90)<da ) Alert('B', ca_Unexpected90 + setting)
    }
    Else If(setting == 'cubic') {
      If( Abs(a-b)>dl || Abs(a-c)>dl )                         Throw(cl_NotCorrect + setting)
      If( Abs(alp-90)>da || Abs(bet-90)>da || Abs(gam-90)>da ) Throw(ca_NotCorrect + setting)
    }
;
     save_

save_validn.datapresent
    _definition.id             '_validn.datapresent'
    _definition.update          2013-05-13
    _description.text
;
     Defines settings for validating Mandatory and Optional Data as describe in the DNVALIDN
     loop list.
;
    _name.category_id            validn
    _name.object_id              datapresent
    _type.purpose                Desribe
    _type.source                 Assigned
    _type.container              Matrix
    _type.contents               Text
    _type.dimension              [2]

     loop_
    _description_example.case   '[True, False]'
     loop_
    _method.purpose
    _method.expression
     Validation
;

      print   BlockHasItem('_cell.volume')
      print   CategoryName('_cell.volume')
      print   ObjectName('_cell.volume')
      print   BlockHasItemValue('_cell.volume')

   Loop v  as  dnvalidn  {

        print   BlockHasItem(v.dname)

        If(v.status == 'mand') Alert('Mandatory item', v.key + ' -- ' + v.dname)
        Else If (v.status == 'optl') Alert('Optional item', v.key + ' -- ' + v.dname)
        Else If (v.status == 'excl') Alert('Excluded item', v.key + ' -- ' + v.dname)
   }

;
     save_

     save_     #------ close VALIDN category

save_DNVALIDN
 
    _definition.id               DNVALIDN
    _definition.scope            Category
    _definition.class            Loop
    _definition.update           2013-07-25
    _description.text
;
     The CATEGORY of data items used to define mandatory, optional and excluded
     CIF data names in the submitted archive file
;
    _name.category_id            VALIDATION
    _name.object_id              DNVALIDN
    _category.key_id           '_dnvalidn.key'
 
 
save_dnvalidn.key
    _definition.id             '_dnvalidn.key'
    _definition.update           2013-07-25
    _description.text
;
     Value is a unique key to a set of DNVALIDN items
     in a looped list.
;
    _name.category_id            dnvalidn
    _name.object_id              key
    _type.purpose                Key
    _type.source                 Related
    _type.container              Single
    _type.contents               Integer
     save_


save_dnvalidn.dname
    _definition.id             '_dnvalidn.dname'
    _definition.update           2013-07-25
    _description.text
;
     Text to identify data names
;
    _name.category_id            dnvalidn
    _name.object_id              dname
    _type.purpose                Describe
    _type.source                 Recorded
    _type.container              Single
    _type.contents               Text
     _description_example.case   '_cell.length_a'


#      loop_
#     _method.purpose
#     _method.expression
# 
#      Validation
# ;
# 
#    Loop v  as  dnvalidn  {
# 
#         if(v.status == 'mand') Alert('B', v.key + '---- ' + v.dname)
#    }
# ;

     save_

save_dnvalidn.status
    _definition.id             '_dnvalidn.status'
    _definition.update           2013-07-25
    _description.text
;
     Code for equired status of data item in archive file 
;
    _name.category_id            dnvalidn
    _name.object_id              status
    _type.purpose                State
    _type.source                 Assigned
    _type.container              Single
    _type.contents               Code
     loop_
    _enumeration_set.state
    _enumeration_set.detail      mand   'mandatory data item'
                                 optl   'optional data item'
                                 excl   'excluded data item'
    _enumeration.default         optl
     save_


     save_     #------ close DNVALIDN category

     save_     #------ close VALIDATION category
 
#=============================================================================
#  The dictionary's creation history. Completely irrelevant
#============================================================================
   
     loop_
    _dictionary_audit.version
    _dictionary_audit.date
    _dictionary_audit.revision
   
     1.1.01   2006-03-07
;
     Initial CORE_DIFFRACTION dictionary constructed from CORE_3 v3.5.02
;
     1.1.02   2006-03-08
;
     Insert enumeration_set into _diffrn_radiation.type
;
     1.1.03   2006-05-16
;
   In DIFFRN_STANDARD_REFLN changed the key to .code instead of .hkl
;
     1.2.01   2006-06-20
;
   Apply DDL 3.6.04 attribute changes.
;
     1.2.02   2006-06-30
;
   Apply DDL 3.6.05 attribute changes.
;
     1.2.03   2006-09-07
;
   Apply DDL 3.6.08 attribute changes.
;
     1.2.04   2006-11-13
;
   Apply DDL 3.6.10 attribute changes.
   Change method.id to method.purpose; EVAL to Evaluation
;
     1.2.05   2006-12-14
;
   Apply DDL 3.7.01 attribute changes.
;
     1.3.01   2007-02-07
;
   Apply DDL 3.7.04 attribute changes.
;
     1.3.02   2007-02-09
;
   Correct TYPE in _diffrn_standards.number and
   _diffrn_standards.interval_count
;
    1.3.03   2007-10-13
;
    Placed tags in _category_key.primitive lists within quotes.
;
    1.3.04   2008-01-18
;
    Replaced import_list controls with leading uppercase character.
	Changed import_list [....] to [[....]]
;
    1.3.05   2008-06-18
;
    Change import_list.id to be ((.....))
    For all *.key items change _type.contents from Code to Inherited
    For other *.id items some _type.purpose from Key to Identify
	For all *.hkl change _type.purpose from Observed to Identify
;
    1.3.06   2008-06-19
;
    Ensure that all items with _type.contents Code are enumerated
	otherwise they are Text.
;
    1.3.07   2008-06-24
;
    Change all _type.dimension values
;
     1.4.01   2011-06-07
;
   Replace category class "List" with "Loop"
   Replace all "Tuple" with "List"
   Replace all "Array" with "List"
   Place all import lists into [[......]]
;
     1.4.02   2011-08-01
;
   Replace category class "List" with "Loop"pply nested save frames.
   Apply import.get changes
   Apply all the DDL 3.8 changes
;
     1.4.03   2011-08-03
;
   Change name of import file com_att.dic to templ_attr.cif
   Change name of import file com_val.dic to templ_templcif
;
     1.4.04   2011-12-01
;
   Change container type from List to Matrix for relevant item definitions
;
     1.4.05   2012-01-25
;
   For import.get change the key "fram" to "save".
;
     1.5.01   2012-05-07
;
   Apply DDL 3.10.01 changes. 
;
     1.5.02   2012-10-16
;
   Apply DDL 3.10.02 changes for type.contents.
   Remove type.contents "Inherited"; insert Definition method expression.
;
     1.5.03   2012-11-20
;
   Invoke container functions Matrix, List in methods scripts where needed.
;
     1.5.04   2012-11-26
;
   Add DDL1 tags as alias.definition_id values
;
     1.5.05   2012-11-30
;
   Removed {} from Definition methods of refln_F_calc and refln.F_complex
;
     1.5.06   2012-12-13
;
   Added diffrn.ambient_pressure_gt and _lt.
   Added diffrn.ambient_temperature_gt and _lt.
   Added diffrn_refln.intensity_net_su to alias DDL1 tags.
;
     1.5.07   2013-01-15
;
   Added diffrn_reflns.limit_max and _min
;
    1.5.08   2013-01-28
;
  Changed atom_site.symmetry_multiplicity to *.site_symmetry_multiplicity 
;
    1.5.09   2013-02-18
;
  Eval method for refln.F_complex generalised to use atom_site.matrix_beta
;
    1.5.10   2013-02-21
;
  Removed {} from conditional single-line statements in methods
;
    1.5.11   2013-02-22
;
  Corrected object_id for diffrn_reflns.resolution_max and
  diffrn_source.take_off_angle
;
    1.6.01   2013-03-08
;
  Changes arising from alerts issued by ALIGN.
;
    1.6.02   2013-03-23
;
  Change the diffrn_radiation.type to type.contents 'Text'.
;
    1.6.03   2013-04-11
;
   Added type.contents 'Implied' to all Key definitions
   Removed desription.common from all defs; inconsistent invocations
   Replace type.cource state 'Observed' with 'Recorded'
   Replace type.source state 'Assembled' with 'Related'
   Replace type.source state 'Selected' with 'Assigned'
;
    1.6.04   2013-04-16
;
   Changed type.source 'Measured' to 'Recorded'
;
    1.6.05   2013-04-17
;
   Changed type.source 'Quantity' to 'Number' or 'Encode'
;
    1.6.06   2013-04-24
;
   Removed 'Pairs' from type.contents; replaced with "Real", "Code", etc.
   Hashed out Eval scripts for F_meas_su and F_squared_meas_su; recursive
;
    1.6.07   2013-04-28
;
    Add definition reflns.apply_dispersion_to_Fcalc Yes/No
;
